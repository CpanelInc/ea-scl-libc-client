#-------------------------------------------------------------------------------------
#
# Start Configuration
#
#-------------------------------------------------------------------------------------

# the upstream project name that you're branching from
OBS_PROJECT := EA4

#-------------------------------------------------------------------------------------
#
# End Configuration
#
#-------------------------------------------------------------------------------------


#-------------------
# Variables
#-------------------

# allow developer to override which pacakge to debug when doing 'make chroot'
ifndef $(ARCH)
ARCH := $(shell uname -m)
endif

DISPMSG := $(shell echo -en "You haven't set up OBS correctly on your machine.\nPlease read, https://cpanel.wiki/display/AL/Setting+up+yourself+for+using+OBS")
OBS_USERNAME := $(shell grep -A5 '[build.dev.cpanel.net]' ~/.oscrc 2>/dev/null| awk -F= '/user=/ {print $$2}')

# NOTE: OBS only like ascii alpha-numeric characters
GIT_BRANCH := $(shell git branch | awk '/^*/ { print $$2 }' | sed -e 's/[^a-z0-9]/_/ig')
ifdef bamboo_repository_git_branch
GIT_BRANCH := $(bamboo_repository_git_branch)
endif

# OBS does not support / in branch names
GIT_BRANCH := $(subst /,-,$(GIT_BRANCH))

# if we're pushing to master, push to the upstream project
ifeq ($(bamboo_repository_git_branch),master)
BUILD_TARGET := $(OBS_PROJECT)
# otherwise, push to a local integration area.  we substitute ':' because
# OBS doesn't properly create the directory when it has : in it
else
BUILD_TARGET := home:$(OBS_USERNAME):$(subst :,-,$(OBS_PROJECT)):$(GIT_BRANCH)
endif

# Autogenerated target names for an SCL package
SCL_TARGETS := $(shell ls -1 macros/)

# the name of the spec file (hopefully there's only 1)
SPEC := $(shell ls -1 SPECS | head -1)

# This variables should be re-interpretted each time (notice the = vs :=) so that
# changing targets will allow the package and working directory to change
OBS_PACKAGE = $(shell echo $@ | sed -e 's/\-[a-z]\+$$//')

# Temporary variable used by build-init
TMP_OSC := $(shell echo .osc.tmp.$$$$)

.PHONY: all clean local vars chroot obs check init build-clean build-init

#-----------------------
# Primary make targets
#-----------------------

all: local

local: check $(foreach target,$(SCL_TARGETS),$(target)-local)

chroot: check $(foreach target,$(SCL_TARGETS),$(target)-chroot)

obs: check $(foreach target,$(SCL_TARGETS),$(target)-obs)

vars: check $(foreach target,$(SCL_TARGETS),$(target)-vars)

clean: build-clean

#----------------------
# Helper make targets
#----------------------

# Builds the RPMs on your local machine using the OBS infrstructure.
# This is useful to test before submitting to OBS.
#
# For example, if you wanted to build PHP without running tests:
#	OSC_BUILD_OPTS='--define="runselftest 0"' make local
$(foreach target,$(SCL_TARGETS),$(target)-local):
	make $(OBS_PACKAGE)-buildinit
	cd OBS/$(BUILD_TARGET)/$(OBS_PACKAGE) && osc build $(OSC_BUILD_OPTS) --clean --noverify --disable-debuginfo CentOS_6.5_standard $(ARCH) $(SPEC)
	make build-clean

# TODO: In the future, use the 'osc repos' command instead of hard-coding CentOS_6.5_standard
$(foreach target,$(SCL_TARGETS),$(target)-chroot):
	make $(OBS_PACKAGE)-buildinit
	cd OBS/$(BUILD_TARGET)/$(OBS_PACKAGE) && osc chroot --local-package -o CentOS_6.5_standard $(ARCH) $(OBS_PACKAGE)
	make build-clean

$(foreach target,$(SCL_TARGETS),$(target)-obs):
	make $(OBS_PACKAGE)-buildinit
	cd OBS/$(BUILD_TARGET)/$(OBS_PACKAGE) && osc addremove -r 2> /dev/null || exit 0
	cd OBS/$(BUILD_TARGET) && osc ci -m "Makefile check-in - hostname($(shell hostname)) date($(shell date)) branch($(GIT_BRANCH))"
	make build-clean

$(foreach target,$(SCL_TARGETS),$(target)-vars):
	@echo "ARCH: $(ARCH)"
	@echo "OBS_USERNAME: $(OBS_USERNAME)"
	@echo "GIT_BRANCH: $(GIT_BRANCH)"
	@echo "BUILD_TARGET: $(BUILD_TARGET)"
	@echo "OBS_PROJECT: $(OBS_PROJECT)"
	@echo "OBS_PACKAGE: $(OBS_PACKAGE)"
	@echo "SCL_TARGETS: $(SCL_TARGETS)"
	@echo "TMP_OSC: $(TMP_OSC)"
	@echo "SPEC: $(SPEC)"
	@echo

$(foreach target,$(SCL_TARGETS),$(target)-buildinit): build-clean
	osc branch $(OBS_PROJECT) $(OBS_PACKAGE) $(BUILD_TARGET) $(OBS_PACKAGE) &>$(TMP_OSC) || ( grep -q "already exists" $(TMP_OSC) && ( rm -f $(TMP_OSC) ; exit 0 ) || ( rm -f $(TMP_OSC) ; exit 1 ) )
	mkdir OBS
	cd OBS && osc co $(BUILD_TARGET) $(OBS_PACKAGE)
	mv OBS/$(BUILD_TARGET)/$(OBS_PACKAGE)/.osc OBS/$(TMP_OSC)
	rm -rf OBS/$(BUILD_TARGET)/$(OBS_PACKAGE)/*
	mkdir -p OBS/$(BUILD_TARGET)/$(OBS_PACKAGE)
	cp --remove-destination -pr SOURCES/* SPECS/* OBS/$(BUILD_TARGET)/$(OBS_PACKAGE)/
	mv OBS/$(TMP_OSC) OBS/$(BUILD_TARGET)/$(OBS_PACKAGE)/.osc
	cat macros/$(OBS_PACKAGE) SPECS/$(SPEC) > OBS/$(BUILD_TARGET)/$(OBS_PACKAGE)/$(SPEC)

build-clean:
	rm -rf OBS

check: README.md
	@[ -e ~/.oscrc ] || make errmsg
	@[ -x /usr/bin/osc ] || make errmsg
	@[ -x /usr/bin/build ] || make errmsg
	@[ -d .git ] || DISPMSG="This isn't a git repository." make -e errmsg
	@[ -n "$(ARCH)" ] || DISPMSG="Unable to determine host architecture type using ARCH environment variable" make -e errmsg
	@[ -z "$(bamboo_repository_git_branch)" ] && ( [ -x /usr/bin/rpmlint ] || DISPMSG="You should use YUM to install the 'rpmlint' package" make -e warnmsg ) || exit 0
	@[ -n "$(SCL_TARGETS)" ] || DISPMSG="You haven't defined any SCL targts.  Please read the instructions in README.md" make -e errmsg
	$(foreach target,$(SCL_TARGETS),@osc api -X GET /source/$(OBS_PROJECT)/$(target) &>/dev/null || DISPMSG="Failed to find the $(OBS_PROJECT):$(target) OBS project" make -e errmsg;)

warnmsg:
	@echo -e "\nWARNING: $(DISPMSG)\n";
	@exit 0

errmsg:
	@echo -e "\nERROR: $(DISPMSG)\n"
	@exit 1
